package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.Storage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORAGE".
*/
public class StorageDao extends AbstractDao<Storage, Void> {

    public static final String TABLENAME = "STORAGE";

    /**
     * Properties of entity Storage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FItemID = new Property(0, String.class, "FItemID", false, "FITEM_ID");
        public final static Property FEmpID = new Property(1, String.class, "FEmpID", false, "FEMP_ID");
        public final static Property FName = new Property(2, String.class, "FName", false, "FNAME");
        public final static Property FNumber = new Property(3, String.class, "FNumber", false, "FNUMBER");
        public final static Property FTypeID = new Property(4, String.class, "FTypeID", false, "FTYPE_ID");
        public final static Property FSPGroupID = new Property(5, String.class, "FSPGroupID", false, "FSPGROUP_ID");
        public final static Property FGroupID = new Property(6, String.class, "FGroupID", false, "FGROUP_ID");
        public final static Property FStockGroupID = new Property(7, String.class, "FStockGroupID", false, "FSTOCK_GROUP_ID");
        public final static Property FIsStockMgr = new Property(8, String.class, "FIsStockMgr", false, "FIS_STOCK_MGR");
        public final static Property FUnderStock = new Property(9, String.class, "FUnderStock", false, "FUNDER_STOCK");
    }


    public StorageDao(DaoConfig config) {
        super(config);
    }
    
    public StorageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORAGE\" (" + //
                "\"FITEM_ID\" TEXT," + // 0: FItemID
                "\"FEMP_ID\" TEXT," + // 1: FEmpID
                "\"FNAME\" TEXT," + // 2: FName
                "\"FNUMBER\" TEXT," + // 3: FNumber
                "\"FTYPE_ID\" TEXT," + // 4: FTypeID
                "\"FSPGROUP_ID\" TEXT," + // 5: FSPGroupID
                "\"FGROUP_ID\" TEXT," + // 6: FGroupID
                "\"FSTOCK_GROUP_ID\" TEXT," + // 7: FStockGroupID
                "\"FIS_STOCK_MGR\" TEXT," + // 8: FIsStockMgr
                "\"FUNDER_STOCK\" TEXT);"); // 9: FUnderStock
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Storage entity) {
        stmt.clearBindings();
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(1, FItemID);
        }
 
        String FEmpID = entity.getFEmpID();
        if (FEmpID != null) {
            stmt.bindString(2, FEmpID);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(3, FName);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(4, FNumber);
        }
 
        String FTypeID = entity.getFTypeID();
        if (FTypeID != null) {
            stmt.bindString(5, FTypeID);
        }
 
        String FSPGroupID = entity.getFSPGroupID();
        if (FSPGroupID != null) {
            stmt.bindString(6, FSPGroupID);
        }
 
        String FGroupID = entity.getFGroupID();
        if (FGroupID != null) {
            stmt.bindString(7, FGroupID);
        }
 
        String FStockGroupID = entity.getFStockGroupID();
        if (FStockGroupID != null) {
            stmt.bindString(8, FStockGroupID);
        }
 
        String FIsStockMgr = entity.getFIsStockMgr();
        if (FIsStockMgr != null) {
            stmt.bindString(9, FIsStockMgr);
        }
 
        String FUnderStock = entity.getFUnderStock();
        if (FUnderStock != null) {
            stmt.bindString(10, FUnderStock);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Storage entity) {
        stmt.clearBindings();
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(1, FItemID);
        }
 
        String FEmpID = entity.getFEmpID();
        if (FEmpID != null) {
            stmt.bindString(2, FEmpID);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(3, FName);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(4, FNumber);
        }
 
        String FTypeID = entity.getFTypeID();
        if (FTypeID != null) {
            stmt.bindString(5, FTypeID);
        }
 
        String FSPGroupID = entity.getFSPGroupID();
        if (FSPGroupID != null) {
            stmt.bindString(6, FSPGroupID);
        }
 
        String FGroupID = entity.getFGroupID();
        if (FGroupID != null) {
            stmt.bindString(7, FGroupID);
        }
 
        String FStockGroupID = entity.getFStockGroupID();
        if (FStockGroupID != null) {
            stmt.bindString(8, FStockGroupID);
        }
 
        String FIsStockMgr = entity.getFIsStockMgr();
        if (FIsStockMgr != null) {
            stmt.bindString(9, FIsStockMgr);
        }
 
        String FUnderStock = entity.getFUnderStock();
        if (FUnderStock != null) {
            stmt.bindString(10, FUnderStock);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Storage readEntity(Cursor cursor, int offset) {
        Storage entity = new Storage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FItemID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FEmpID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FTypeID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FSPGroupID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FGroupID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FStockGroupID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FIsStockMgr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // FUnderStock
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Storage entity, int offset) {
        entity.setFItemID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFEmpID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFTypeID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFSPGroupID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFGroupID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFStockGroupID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFIsStockMgr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFUnderStock(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Storage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Storage entity) {
        return null;
    }

    @Override
    public boolean hasKey(Storage entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
