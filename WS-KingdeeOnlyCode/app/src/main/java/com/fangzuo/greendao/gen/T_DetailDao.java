package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.T_Detail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T__DETAIL".
*/
public class T_DetailDao extends AbstractDao<T_Detail, String> {

    public static final String TABLENAME = "T__DETAIL";

    /**
     * Properties of entity T_Detail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FOrderId = new Property(0, long.class, "FOrderId", false, "FORDER_ID");
        public final static Property FIndex = new Property(1, String.class, "FIndex", true, "FINDEX");
        public final static Property FBarcode = new Property(2, String.class, "FBarcode", false, "FBARCODE");
        public final static Property FStorageId = new Property(3, String.class, "FStorageId", false, "FSTORAGE_ID");
        public final static Property FStorage = new Property(4, String.class, "FStorage", false, "FSTORAGE");
        public final static Property FProductCode = new Property(5, String.class, "FProductCode", false, "FPRODUCT_CODE");
        public final static Property FRedBlue = new Property(6, String.class, "FRedBlue", false, "FRED_BLUE");
        public final static Property FProductId = new Property(7, String.class, "FProductId", false, "FPRODUCT_ID");
        public final static Property FProductName = new Property(8, String.class, "FProductName", false, "FPRODUCT_NAME");
        public final static Property FStandard = new Property(9, String.class, "FStandard", false, "FSTANDARD");
        public final static Property FUnitId = new Property(10, String.class, "FUnitId", false, "FUNIT_ID");
        public final static Property FUnit = new Property(11, String.class, "FUnit", false, "FUNIT");
        public final static Property FQuantity = new Property(12, String.class, "FQuantity", false, "FQUANTITY");
        public final static Property FTaxUnitPrice = new Property(13, String.class, "FTaxUnitPrice", false, "FTAX_UNIT_PRICE");
        public final static Property FDiscount = new Property(14, String.class, "FDiscount", false, "FDISCOUNT");
        public final static Property FIdentity = new Property(15, String.class, "FIdentity", false, "FIDENTITY");
        public final static Property FDateDelivery = new Property(16, String.class, "FDateDelivery", false, "FDATE_DELIVERY");
        public final static Property FBatch = new Property(17, String.class, "FBatch", false, "FBATCH");
        public final static Property FBillNo = new Property(18, String.class, "FBillNo", false, "FBILL_NO");
        public final static Property FRate = new Property(19, String.class, "FRate", false, "FRATE");
        public final static Property FoutStoragename = new Property(20, String.class, "FoutStoragename", false, "FOUT_STORAGENAME");
        public final static Property FoutStorageid = new Property(21, String.class, "FoutStorageid", false, "FOUT_STORAGEID");
        public final static Property Foutwavehouseid = new Property(22, String.class, "Foutwavehouseid", false, "FOUTWAVEHOUSEID");
        public final static Property Foutwavehousename = new Property(23, String.class, "Foutwavehousename", false, "FOUTWAVEHOUSENAME");
        public final static Property FEntryID = new Property(24, String.class, "FEntryID", false, "FENTRY_ID");
        public final static Property FPositionId = new Property(25, String.class, "FPositionId", false, "FPOSITION_ID");
        public final static Property FPosition = new Property(26, String.class, "FPosition", false, "FPOSITION");
        public final static Property FInterID = new Property(27, String.class, "FInterID", false, "FINTER_ID");
        public final static Property OutStorage = new Property(28, String.class, "outStorage", false, "OUT_STORAGE");
        public final static Property InStorage = new Property(29, String.class, "inStorage", false, "IN_STORAGE");
        public final static Property Unitrate = new Property(30, double.class, "unitrate", false, "UNITRATE");
        public final static Property Activity = new Property(31, int.class, "activity", false, "ACTIVITY");
        public final static Property Model = new Property(32, String.class, "model", false, "MODEL");
        public final static Property IMIE = new Property(33, String.class, "IMIE", false, "IMIE");
        public final static Property MakerId = new Property(34, String.class, "MakerId", false, "MAKER_ID");
        public final static Property DataInput = new Property(35, String.class, "DataInput", false, "DATA_INPUT");
        public final static Property DataPush = new Property(36, String.class, "DataPush", false, "DATA_PUSH");
        public final static Property FKFDate = new Property(37, String.class, "FKFDate", false, "FKFDATE");
        public final static Property FKFPeriod = new Property(38, String.class, "FKFPeriod", false, "FKFPERIOD");
        public final static Property IsAssemble = new Property(39, String.class, "IsAssemble", false, "IS_ASSEMBLE");
        public final static Property FApiClient = new Property(40, String.class, "FApiClient", false, "FAPI_CLIENT");
        public final static Property FApiSendNo = new Property(41, String.class, "FApiSendNo", false, "FAPI_SEND_NO");
        public final static Property FApiPTNo = new Property(42, String.class, "FApiPTNo", false, "FAPI_PTNO");
    }


    public T_DetailDao(DaoConfig config) {
        super(config);
    }
    
    public T_DetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"T__DETAIL\" (" + //
                "\"FORDER_ID\" INTEGER NOT NULL ," + // 0: FOrderId
                "\"FINDEX\" TEXT PRIMARY KEY NOT NULL ," + // 1: FIndex
                "\"FBARCODE\" TEXT," + // 2: FBarcode
                "\"FSTORAGE_ID\" TEXT," + // 3: FStorageId
                "\"FSTORAGE\" TEXT," + // 4: FStorage
                "\"FPRODUCT_CODE\" TEXT," + // 5: FProductCode
                "\"FRED_BLUE\" TEXT," + // 6: FRedBlue
                "\"FPRODUCT_ID\" TEXT," + // 7: FProductId
                "\"FPRODUCT_NAME\" TEXT," + // 8: FProductName
                "\"FSTANDARD\" TEXT," + // 9: FStandard
                "\"FUNIT_ID\" TEXT," + // 10: FUnitId
                "\"FUNIT\" TEXT," + // 11: FUnit
                "\"FQUANTITY\" TEXT," + // 12: FQuantity
                "\"FTAX_UNIT_PRICE\" TEXT," + // 13: FTaxUnitPrice
                "\"FDISCOUNT\" TEXT," + // 14: FDiscount
                "\"FIDENTITY\" TEXT," + // 15: FIdentity
                "\"FDATE_DELIVERY\" TEXT," + // 16: FDateDelivery
                "\"FBATCH\" TEXT," + // 17: FBatch
                "\"FBILL_NO\" TEXT," + // 18: FBillNo
                "\"FRATE\" TEXT," + // 19: FRate
                "\"FOUT_STORAGENAME\" TEXT," + // 20: FoutStoragename
                "\"FOUT_STORAGEID\" TEXT," + // 21: FoutStorageid
                "\"FOUTWAVEHOUSEID\" TEXT," + // 22: Foutwavehouseid
                "\"FOUTWAVEHOUSENAME\" TEXT," + // 23: Foutwavehousename
                "\"FENTRY_ID\" TEXT," + // 24: FEntryID
                "\"FPOSITION_ID\" TEXT," + // 25: FPositionId
                "\"FPOSITION\" TEXT," + // 26: FPosition
                "\"FINTER_ID\" TEXT," + // 27: FInterID
                "\"OUT_STORAGE\" TEXT," + // 28: outStorage
                "\"IN_STORAGE\" TEXT," + // 29: inStorage
                "\"UNITRATE\" REAL NOT NULL ," + // 30: unitrate
                "\"ACTIVITY\" INTEGER NOT NULL ," + // 31: activity
                "\"MODEL\" TEXT," + // 32: model
                "\"IMIE\" TEXT," + // 33: IMIE
                "\"MAKER_ID\" TEXT," + // 34: MakerId
                "\"DATA_INPUT\" TEXT," + // 35: DataInput
                "\"DATA_PUSH\" TEXT," + // 36: DataPush
                "\"FKFDATE\" TEXT," + // 37: FKFDate
                "\"FKFPERIOD\" TEXT," + // 38: FKFPeriod
                "\"IS_ASSEMBLE\" TEXT," + // 39: IsAssemble
                "\"FAPI_CLIENT\" TEXT," + // 40: FApiClient
                "\"FAPI_SEND_NO\" TEXT," + // 41: FApiSendNo
                "\"FAPI_PTNO\" TEXT);"); // 42: FApiPTNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"T__DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, T_Detail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFOrderId());
 
        String FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindString(2, FIndex);
        }
 
        String FBarcode = entity.getFBarcode();
        if (FBarcode != null) {
            stmt.bindString(3, FBarcode);
        }
 
        String FStorageId = entity.getFStorageId();
        if (FStorageId != null) {
            stmt.bindString(4, FStorageId);
        }
 
        String FStorage = entity.getFStorage();
        if (FStorage != null) {
            stmt.bindString(5, FStorage);
        }
 
        String FProductCode = entity.getFProductCode();
        if (FProductCode != null) {
            stmt.bindString(6, FProductCode);
        }
 
        String FRedBlue = entity.getFRedBlue();
        if (FRedBlue != null) {
            stmt.bindString(7, FRedBlue);
        }
 
        String FProductId = entity.getFProductId();
        if (FProductId != null) {
            stmt.bindString(8, FProductId);
        }
 
        String FProductName = entity.getFProductName();
        if (FProductName != null) {
            stmt.bindString(9, FProductName);
        }
 
        String FStandard = entity.getFStandard();
        if (FStandard != null) {
            stmt.bindString(10, FStandard);
        }
 
        String FUnitId = entity.getFUnitId();
        if (FUnitId != null) {
            stmt.bindString(11, FUnitId);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(12, FUnit);
        }
 
        String FQuantity = entity.getFQuantity();
        if (FQuantity != null) {
            stmt.bindString(13, FQuantity);
        }
 
        String FTaxUnitPrice = entity.getFTaxUnitPrice();
        if (FTaxUnitPrice != null) {
            stmt.bindString(14, FTaxUnitPrice);
        }
 
        String FDiscount = entity.getFDiscount();
        if (FDiscount != null) {
            stmt.bindString(15, FDiscount);
        }
 
        String FIdentity = entity.getFIdentity();
        if (FIdentity != null) {
            stmt.bindString(16, FIdentity);
        }
 
        String FDateDelivery = entity.getFDateDelivery();
        if (FDateDelivery != null) {
            stmt.bindString(17, FDateDelivery);
        }
 
        String FBatch = entity.getFBatch();
        if (FBatch != null) {
            stmt.bindString(18, FBatch);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(19, FBillNo);
        }
 
        String FRate = entity.getFRate();
        if (FRate != null) {
            stmt.bindString(20, FRate);
        }
 
        String FoutStoragename = entity.getFoutStoragename();
        if (FoutStoragename != null) {
            stmt.bindString(21, FoutStoragename);
        }
 
        String FoutStorageid = entity.getFoutStorageid();
        if (FoutStorageid != null) {
            stmt.bindString(22, FoutStorageid);
        }
 
        String Foutwavehouseid = entity.getFoutwavehouseid();
        if (Foutwavehouseid != null) {
            stmt.bindString(23, Foutwavehouseid);
        }
 
        String Foutwavehousename = entity.getFoutwavehousename();
        if (Foutwavehousename != null) {
            stmt.bindString(24, Foutwavehousename);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(25, FEntryID);
        }
 
        String FPositionId = entity.getFPositionId();
        if (FPositionId != null) {
            stmt.bindString(26, FPositionId);
        }
 
        String FPosition = entity.getFPosition();
        if (FPosition != null) {
            stmt.bindString(27, FPosition);
        }
 
        String FInterID = entity.getFInterID();
        if (FInterID != null) {
            stmt.bindString(28, FInterID);
        }
 
        String outStorage = entity.getOutStorage();
        if (outStorage != null) {
            stmt.bindString(29, outStorage);
        }
 
        String inStorage = entity.getInStorage();
        if (inStorage != null) {
            stmt.bindString(30, inStorage);
        }
        stmt.bindDouble(31, entity.getUnitrate());
        stmt.bindLong(32, entity.getActivity());
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(33, model);
        }
 
        String IMIE = entity.getIMIE();
        if (IMIE != null) {
            stmt.bindString(34, IMIE);
        }
 
        String MakerId = entity.getMakerId();
        if (MakerId != null) {
            stmt.bindString(35, MakerId);
        }
 
        String DataInput = entity.getDataInput();
        if (DataInput != null) {
            stmt.bindString(36, DataInput);
        }
 
        String DataPush = entity.getDataPush();
        if (DataPush != null) {
            stmt.bindString(37, DataPush);
        }
 
        String FKFDate = entity.getFKFDate();
        if (FKFDate != null) {
            stmt.bindString(38, FKFDate);
        }
 
        String FKFPeriod = entity.getFKFPeriod();
        if (FKFPeriod != null) {
            stmt.bindString(39, FKFPeriod);
        }
 
        String IsAssemble = entity.getIsAssemble();
        if (IsAssemble != null) {
            stmt.bindString(40, IsAssemble);
        }
 
        String FApiClient = entity.getFApiClient();
        if (FApiClient != null) {
            stmt.bindString(41, FApiClient);
        }
 
        String FApiSendNo = entity.getFApiSendNo();
        if (FApiSendNo != null) {
            stmt.bindString(42, FApiSendNo);
        }
 
        String FApiPTNo = entity.getFApiPTNo();
        if (FApiPTNo != null) {
            stmt.bindString(43, FApiPTNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, T_Detail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFOrderId());
 
        String FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindString(2, FIndex);
        }
 
        String FBarcode = entity.getFBarcode();
        if (FBarcode != null) {
            stmt.bindString(3, FBarcode);
        }
 
        String FStorageId = entity.getFStorageId();
        if (FStorageId != null) {
            stmt.bindString(4, FStorageId);
        }
 
        String FStorage = entity.getFStorage();
        if (FStorage != null) {
            stmt.bindString(5, FStorage);
        }
 
        String FProductCode = entity.getFProductCode();
        if (FProductCode != null) {
            stmt.bindString(6, FProductCode);
        }
 
        String FRedBlue = entity.getFRedBlue();
        if (FRedBlue != null) {
            stmt.bindString(7, FRedBlue);
        }
 
        String FProductId = entity.getFProductId();
        if (FProductId != null) {
            stmt.bindString(8, FProductId);
        }
 
        String FProductName = entity.getFProductName();
        if (FProductName != null) {
            stmt.bindString(9, FProductName);
        }
 
        String FStandard = entity.getFStandard();
        if (FStandard != null) {
            stmt.bindString(10, FStandard);
        }
 
        String FUnitId = entity.getFUnitId();
        if (FUnitId != null) {
            stmt.bindString(11, FUnitId);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(12, FUnit);
        }
 
        String FQuantity = entity.getFQuantity();
        if (FQuantity != null) {
            stmt.bindString(13, FQuantity);
        }
 
        String FTaxUnitPrice = entity.getFTaxUnitPrice();
        if (FTaxUnitPrice != null) {
            stmt.bindString(14, FTaxUnitPrice);
        }
 
        String FDiscount = entity.getFDiscount();
        if (FDiscount != null) {
            stmt.bindString(15, FDiscount);
        }
 
        String FIdentity = entity.getFIdentity();
        if (FIdentity != null) {
            stmt.bindString(16, FIdentity);
        }
 
        String FDateDelivery = entity.getFDateDelivery();
        if (FDateDelivery != null) {
            stmt.bindString(17, FDateDelivery);
        }
 
        String FBatch = entity.getFBatch();
        if (FBatch != null) {
            stmt.bindString(18, FBatch);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(19, FBillNo);
        }
 
        String FRate = entity.getFRate();
        if (FRate != null) {
            stmt.bindString(20, FRate);
        }
 
        String FoutStoragename = entity.getFoutStoragename();
        if (FoutStoragename != null) {
            stmt.bindString(21, FoutStoragename);
        }
 
        String FoutStorageid = entity.getFoutStorageid();
        if (FoutStorageid != null) {
            stmt.bindString(22, FoutStorageid);
        }
 
        String Foutwavehouseid = entity.getFoutwavehouseid();
        if (Foutwavehouseid != null) {
            stmt.bindString(23, Foutwavehouseid);
        }
 
        String Foutwavehousename = entity.getFoutwavehousename();
        if (Foutwavehousename != null) {
            stmt.bindString(24, Foutwavehousename);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(25, FEntryID);
        }
 
        String FPositionId = entity.getFPositionId();
        if (FPositionId != null) {
            stmt.bindString(26, FPositionId);
        }
 
        String FPosition = entity.getFPosition();
        if (FPosition != null) {
            stmt.bindString(27, FPosition);
        }
 
        String FInterID = entity.getFInterID();
        if (FInterID != null) {
            stmt.bindString(28, FInterID);
        }
 
        String outStorage = entity.getOutStorage();
        if (outStorage != null) {
            stmt.bindString(29, outStorage);
        }
 
        String inStorage = entity.getInStorage();
        if (inStorage != null) {
            stmt.bindString(30, inStorage);
        }
        stmt.bindDouble(31, entity.getUnitrate());
        stmt.bindLong(32, entity.getActivity());
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(33, model);
        }
 
        String IMIE = entity.getIMIE();
        if (IMIE != null) {
            stmt.bindString(34, IMIE);
        }
 
        String MakerId = entity.getMakerId();
        if (MakerId != null) {
            stmt.bindString(35, MakerId);
        }
 
        String DataInput = entity.getDataInput();
        if (DataInput != null) {
            stmt.bindString(36, DataInput);
        }
 
        String DataPush = entity.getDataPush();
        if (DataPush != null) {
            stmt.bindString(37, DataPush);
        }
 
        String FKFDate = entity.getFKFDate();
        if (FKFDate != null) {
            stmt.bindString(38, FKFDate);
        }
 
        String FKFPeriod = entity.getFKFPeriod();
        if (FKFPeriod != null) {
            stmt.bindString(39, FKFPeriod);
        }
 
        String IsAssemble = entity.getIsAssemble();
        if (IsAssemble != null) {
            stmt.bindString(40, IsAssemble);
        }
 
        String FApiClient = entity.getFApiClient();
        if (FApiClient != null) {
            stmt.bindString(41, FApiClient);
        }
 
        String FApiSendNo = entity.getFApiSendNo();
        if (FApiSendNo != null) {
            stmt.bindString(42, FApiSendNo);
        }
 
        String FApiPTNo = entity.getFApiPTNo();
        if (FApiPTNo != null) {
            stmt.bindString(43, FApiPTNo);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public T_Detail readEntity(Cursor cursor, int offset) {
        T_Detail entity = new T_Detail( //
            cursor.getLong(offset + 0), // FOrderId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FIndex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FBarcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FStorageId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FStorage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FProductCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FRedBlue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FProductId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FProductName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FStandard
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FUnitId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FUnit
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FQuantity
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // FTaxUnitPrice
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // FDiscount
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // FIdentity
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // FDateDelivery
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // FBatch
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // FBillNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // FRate
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // FoutStoragename
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // FoutStorageid
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // Foutwavehouseid
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Foutwavehousename
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // FEntryID
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // FPositionId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // FPosition
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // FInterID
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // outStorage
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // inStorage
            cursor.getDouble(offset + 30), // unitrate
            cursor.getInt(offset + 31), // activity
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // model
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // IMIE
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // MakerId
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // DataInput
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // DataPush
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // FKFDate
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // FKFPeriod
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // IsAssemble
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // FApiClient
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // FApiSendNo
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42) // FApiPTNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, T_Detail entity, int offset) {
        entity.setFOrderId(cursor.getLong(offset + 0));
        entity.setFIndex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFBarcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFStorageId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFStorage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFProductCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFRedBlue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFProductId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFProductName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFStandard(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFUnitId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFUnit(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFQuantity(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFTaxUnitPrice(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFDiscount(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFIdentity(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFDateDelivery(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFBatch(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFBillNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFRate(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFoutStoragename(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFoutStorageid(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFoutwavehouseid(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFoutwavehousename(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setFEntryID(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setFPositionId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFPosition(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setFInterID(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setOutStorage(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setInStorage(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setUnitrate(cursor.getDouble(offset + 30));
        entity.setActivity(cursor.getInt(offset + 31));
        entity.setModel(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setIMIE(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setMakerId(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setDataInput(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setDataPush(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setFKFDate(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setFKFPeriod(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setIsAssemble(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setFApiClient(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setFApiSendNo(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setFApiPTNo(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
     }
    
    @Override
    protected final String updateKeyAfterInsert(T_Detail entity, long rowId) {
        return entity.getFIndex();
    }
    
    @Override
    public String getKey(T_Detail entity) {
        if(entity != null) {
            return entity.getFIndex();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(T_Detail entity) {
        return entity.getFIndex() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
