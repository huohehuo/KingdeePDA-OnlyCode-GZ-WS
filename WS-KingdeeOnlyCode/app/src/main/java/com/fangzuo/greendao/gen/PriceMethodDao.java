package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.PriceMethod;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRICE_METHOD".
*/
public class PriceMethodDao extends AbstractDao<PriceMethod, Void> {

    public static final String TABLENAME = "PRICE_METHOD";

    /**
     * Properties of entity PriceMethod.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FInterID = new Property(0, String.class, "FInterID", false, "FINTER_ID");
        public final static Property FEntryID = new Property(1, String.class, "FEntryID", false, "FENTRY_ID");
        public final static Property FPri = new Property(2, String.class, "FPri", false, "FPRI");
        public final static Property FPrice = new Property(3, String.class, "FPrice", false, "FPRICE");
        public final static Property FName = new Property(4, String.class, "FName", false, "FNAME");
        public final static Property FItemID = new Property(5, String.class, "FItemID", false, "FITEM_ID");
        public final static Property FUnitID = new Property(6, String.class, "FUnitID", false, "FUNIT_ID");
        public final static Property FRelatedID = new Property(7, String.class, "FRelatedID", false, "FRELATED_ID");
        public final static Property FBegQty = new Property(8, String.class, "FBegQty", false, "FBEG_QTY");
        public final static Property FEndQty = new Property(9, String.class, "FEndQty", false, "FEND_QTY");
        public final static Property FBegDate = new Property(10, String.class, "FBegDate", false, "FBEG_DATE");
        public final static Property FEndDate = new Property(11, String.class, "FEndDate", false, "FEND_DATE");
    }


    public PriceMethodDao(DaoConfig config) {
        super(config);
    }
    
    public PriceMethodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRICE_METHOD\" (" + //
                "\"FINTER_ID\" TEXT," + // 0: FInterID
                "\"FENTRY_ID\" TEXT," + // 1: FEntryID
                "\"FPRI\" TEXT," + // 2: FPri
                "\"FPRICE\" TEXT," + // 3: FPrice
                "\"FNAME\" TEXT," + // 4: FName
                "\"FITEM_ID\" TEXT," + // 5: FItemID
                "\"FUNIT_ID\" TEXT," + // 6: FUnitID
                "\"FRELATED_ID\" TEXT," + // 7: FRelatedID
                "\"FBEG_QTY\" TEXT," + // 8: FBegQty
                "\"FEND_QTY\" TEXT," + // 9: FEndQty
                "\"FBEG_DATE\" TEXT," + // 10: FBegDate
                "\"FEND_DATE\" TEXT);"); // 11: FEndDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRICE_METHOD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PriceMethod entity) {
        stmt.clearBindings();
 
        String FInterID = entity.getFInterID();
        if (FInterID != null) {
            stmt.bindString(1, FInterID);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(2, FEntryID);
        }
 
        String FPri = entity.getFPri();
        if (FPri != null) {
            stmt.bindString(3, FPri);
        }
 
        String FPrice = entity.getFPrice();
        if (FPrice != null) {
            stmt.bindString(4, FPrice);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(5, FName);
        }
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(6, FItemID);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(7, FUnitID);
        }
 
        String FRelatedID = entity.getFRelatedID();
        if (FRelatedID != null) {
            stmt.bindString(8, FRelatedID);
        }
 
        String FBegQty = entity.getFBegQty();
        if (FBegQty != null) {
            stmt.bindString(9, FBegQty);
        }
 
        String FEndQty = entity.getFEndQty();
        if (FEndQty != null) {
            stmt.bindString(10, FEndQty);
        }
 
        String FBegDate = entity.getFBegDate();
        if (FBegDate != null) {
            stmt.bindString(11, FBegDate);
        }
 
        String FEndDate = entity.getFEndDate();
        if (FEndDate != null) {
            stmt.bindString(12, FEndDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PriceMethod entity) {
        stmt.clearBindings();
 
        String FInterID = entity.getFInterID();
        if (FInterID != null) {
            stmt.bindString(1, FInterID);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(2, FEntryID);
        }
 
        String FPri = entity.getFPri();
        if (FPri != null) {
            stmt.bindString(3, FPri);
        }
 
        String FPrice = entity.getFPrice();
        if (FPrice != null) {
            stmt.bindString(4, FPrice);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(5, FName);
        }
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(6, FItemID);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(7, FUnitID);
        }
 
        String FRelatedID = entity.getFRelatedID();
        if (FRelatedID != null) {
            stmt.bindString(8, FRelatedID);
        }
 
        String FBegQty = entity.getFBegQty();
        if (FBegQty != null) {
            stmt.bindString(9, FBegQty);
        }
 
        String FEndQty = entity.getFEndQty();
        if (FEndQty != null) {
            stmt.bindString(10, FEndQty);
        }
 
        String FBegDate = entity.getFBegDate();
        if (FBegDate != null) {
            stmt.bindString(11, FBegDate);
        }
 
        String FEndDate = entity.getFEndDate();
        if (FEndDate != null) {
            stmt.bindString(12, FEndDate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PriceMethod readEntity(Cursor cursor, int offset) {
        PriceMethod entity = new PriceMethod( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FInterID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FEntryID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FPri
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FPrice
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FItemID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FUnitID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FRelatedID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FBegQty
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FEndQty
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FBegDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // FEndDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PriceMethod entity, int offset) {
        entity.setFInterID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFEntryID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFPri(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFItemID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFUnitID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFRelatedID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFBegQty(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFEndQty(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFBegDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFEndDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PriceMethod entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PriceMethod entity) {
        return null;
    }

    @Override
    public boolean hasKey(PriceMethod entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
