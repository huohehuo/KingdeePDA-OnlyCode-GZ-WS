package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.PurchaseMethod;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE_METHOD".
*/
public class PurchaseMethodDao extends AbstractDao<PurchaseMethod, Void> {

    public static final String TABLENAME = "PURCHASE_METHOD";

    /**
     * Properties of entity PurchaseMethod.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FTypeID = new Property(0, String.class, "FTypeID", false, "FTYPE_ID");
        public final static Property FItemID = new Property(1, String.class, "FItemID", false, "FITEM_ID");
        public final static Property FNumber = new Property(2, String.class, "FNumber", false, "FNUMBER");
        public final static Property FName = new Property(3, String.class, "FName", false, "FNAME");
    }


    public PurchaseMethodDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseMethodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE_METHOD\" (" + //
                "\"FTYPE_ID\" TEXT," + // 0: FTypeID
                "\"FITEM_ID\" TEXT," + // 1: FItemID
                "\"FNUMBER\" TEXT," + // 2: FNumber
                "\"FNAME\" TEXT);"); // 3: FName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE_METHOD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PurchaseMethod entity) {
        stmt.clearBindings();
 
        String FTypeID = entity.getFTypeID();
        if (FTypeID != null) {
            stmt.bindString(1, FTypeID);
        }
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(2, FItemID);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(3, FNumber);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(4, FName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PurchaseMethod entity) {
        stmt.clearBindings();
 
        String FTypeID = entity.getFTypeID();
        if (FTypeID != null) {
            stmt.bindString(1, FTypeID);
        }
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(2, FItemID);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(3, FNumber);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(4, FName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PurchaseMethod readEntity(Cursor cursor, int offset) {
        PurchaseMethod entity = new PurchaseMethod( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FTypeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FItemID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // FName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PurchaseMethod entity, int offset) {
        entity.setFTypeID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFItemID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PurchaseMethod entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PurchaseMethod entity) {
        return null;
    }

    @Override
    public boolean hasKey(PurchaseMethod entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
