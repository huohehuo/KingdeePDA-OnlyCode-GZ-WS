package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.YuandanType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "YUANDAN_TYPE".
*/
public class YuandanTypeDao extends AbstractDao<YuandanType, Void> {

    public static final String TABLENAME = "YUANDAN_TYPE";

    /**
     * Properties of entity YuandanType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FID = new Property(0, String.class, "FID", false, "FID");
        public final static Property FName_CHS = new Property(1, String.class, "FName_CHS", false, "FNAME__CHS");
    }


    public YuandanTypeDao(DaoConfig config) {
        super(config);
    }
    
    public YuandanTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"YUANDAN_TYPE\" (" + //
                "\"FID\" TEXT," + // 0: FID
                "\"FNAME__CHS\" TEXT);"); // 1: FName_CHS
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"YUANDAN_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, YuandanType entity) {
        stmt.clearBindings();
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(1, FID);
        }
 
        String FName_CHS = entity.getFName_CHS();
        if (FName_CHS != null) {
            stmt.bindString(2, FName_CHS);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, YuandanType entity) {
        stmt.clearBindings();
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(1, FID);
        }
 
        String FName_CHS = entity.getFName_CHS();
        if (FName_CHS != null) {
            stmt.bindString(2, FName_CHS);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public YuandanType readEntity(Cursor cursor, int offset) {
        YuandanType entity = new YuandanType( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // FName_CHS
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, YuandanType entity, int offset) {
        entity.setFID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFName_CHS(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(YuandanType entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(YuandanType entity) {
        return null;
    }

    @Override
    public boolean hasKey(YuandanType entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
