package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.MainLockData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIN_LOCK_DATA".
*/
public class MainLockDataDao extends AbstractDao<MainLockData, Void> {

    public static final String TABLENAME = "MAIN_LOCK_DATA";

    /**
     * Properties of entity MainLockData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FOrderID = new Property(0, long.class, "FOrderID", false, "FORDER_ID");
        public final static Property FBoxCode = new Property(1, String.class, "FBoxCode", false, "FBOX_CODE");
        public final static Property FBatchNO = new Property(2, String.class, "FBatchNO", false, "FBATCH_NO");
    }


    public MainLockDataDao(DaoConfig config) {
        super(config);
    }
    
    public MainLockDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIN_LOCK_DATA\" (" + //
                "\"FORDER_ID\" INTEGER NOT NULL ," + // 0: FOrderID
                "\"FBOX_CODE\" TEXT," + // 1: FBoxCode
                "\"FBATCH_NO\" TEXT);"); // 2: FBatchNO
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIN_LOCK_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MainLockData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFOrderID());
 
        String FBoxCode = entity.getFBoxCode();
        if (FBoxCode != null) {
            stmt.bindString(2, FBoxCode);
        }
 
        String FBatchNO = entity.getFBatchNO();
        if (FBatchNO != null) {
            stmt.bindString(3, FBatchNO);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MainLockData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFOrderID());
 
        String FBoxCode = entity.getFBoxCode();
        if (FBoxCode != null) {
            stmt.bindString(2, FBoxCode);
        }
 
        String FBatchNO = entity.getFBatchNO();
        if (FBatchNO != null) {
            stmt.bindString(3, FBatchNO);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MainLockData readEntity(Cursor cursor, int offset) {
        MainLockData entity = new MainLockData( //
            cursor.getLong(offset + 0), // FOrderID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FBoxCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // FBatchNO
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MainLockData entity, int offset) {
        entity.setFOrderID(cursor.getLong(offset + 0));
        entity.setFBoxCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFBatchNO(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MainLockData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MainLockData entity) {
        return null;
    }

    @Override
    public boolean hasKey(MainLockData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
