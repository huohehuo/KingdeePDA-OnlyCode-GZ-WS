package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.Client;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENT".
*/
public class ClientDao extends AbstractDao<Client, Void> {

    public static final String TABLENAME = "CLIENT";

    /**
     * Properties of entity Client.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FItemID = new Property(0, String.class, "FItemID", false, "FITEM_ID");
        public final static Property FItemClassID = new Property(1, String.class, "FItemClassID", false, "FITEM_CLASS_ID");
        public final static Property FNumber = new Property(2, String.class, "FNumber", false, "FNUMBER");
        public final static Property FParentID = new Property(3, String.class, "FParentID", false, "FPARENT_ID");
        public final static Property FLevel = new Property(4, String.class, "FLevel", false, "FLEVEL");
        public final static Property FDetail = new Property(5, String.class, "FDetail", false, "FDETAIL");
        public final static Property FName = new Property(6, String.class, "FName", false, "FNAME");
        public final static Property FAddress = new Property(7, String.class, "FAddress", false, "FADDRESS");
        public final static Property FPhone = new Property(8, String.class, "FPhone", false, "FPHONE");
        public final static Property FEmail = new Property(9, String.class, "FEmail", false, "FEMAIL");
        public final static Property FTypeID = new Property(10, String.class, "FTypeID", false, "FTYPE_ID");
    }


    public ClientDao(DaoConfig config) {
        super(config);
    }
    
    public ClientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENT\" (" + //
                "\"FITEM_ID\" TEXT," + // 0: FItemID
                "\"FITEM_CLASS_ID\" TEXT," + // 1: FItemClassID
                "\"FNUMBER\" TEXT," + // 2: FNumber
                "\"FPARENT_ID\" TEXT," + // 3: FParentID
                "\"FLEVEL\" TEXT," + // 4: FLevel
                "\"FDETAIL\" TEXT," + // 5: FDetail
                "\"FNAME\" TEXT," + // 6: FName
                "\"FADDRESS\" TEXT," + // 7: FAddress
                "\"FPHONE\" TEXT," + // 8: FPhone
                "\"FEMAIL\" TEXT," + // 9: FEmail
                "\"FTYPE_ID\" TEXT);"); // 10: FTypeID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Client entity) {
        stmt.clearBindings();
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(1, FItemID);
        }
 
        String FItemClassID = entity.getFItemClassID();
        if (FItemClassID != null) {
            stmt.bindString(2, FItemClassID);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(3, FNumber);
        }
 
        String FParentID = entity.getFParentID();
        if (FParentID != null) {
            stmt.bindString(4, FParentID);
        }
 
        String FLevel = entity.getFLevel();
        if (FLevel != null) {
            stmt.bindString(5, FLevel);
        }
 
        String FDetail = entity.getFDetail();
        if (FDetail != null) {
            stmt.bindString(6, FDetail);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(7, FName);
        }
 
        String FAddress = entity.getFAddress();
        if (FAddress != null) {
            stmt.bindString(8, FAddress);
        }
 
        String FPhone = entity.getFPhone();
        if (FPhone != null) {
            stmt.bindString(9, FPhone);
        }
 
        String FEmail = entity.getFEmail();
        if (FEmail != null) {
            stmt.bindString(10, FEmail);
        }
 
        String FTypeID = entity.getFTypeID();
        if (FTypeID != null) {
            stmt.bindString(11, FTypeID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Client entity) {
        stmt.clearBindings();
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(1, FItemID);
        }
 
        String FItemClassID = entity.getFItemClassID();
        if (FItemClassID != null) {
            stmt.bindString(2, FItemClassID);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(3, FNumber);
        }
 
        String FParentID = entity.getFParentID();
        if (FParentID != null) {
            stmt.bindString(4, FParentID);
        }
 
        String FLevel = entity.getFLevel();
        if (FLevel != null) {
            stmt.bindString(5, FLevel);
        }
 
        String FDetail = entity.getFDetail();
        if (FDetail != null) {
            stmt.bindString(6, FDetail);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(7, FName);
        }
 
        String FAddress = entity.getFAddress();
        if (FAddress != null) {
            stmt.bindString(8, FAddress);
        }
 
        String FPhone = entity.getFPhone();
        if (FPhone != null) {
            stmt.bindString(9, FPhone);
        }
 
        String FEmail = entity.getFEmail();
        if (FEmail != null) {
            stmt.bindString(10, FEmail);
        }
 
        String FTypeID = entity.getFTypeID();
        if (FTypeID != null) {
            stmt.bindString(11, FTypeID);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Client readEntity(Cursor cursor, int offset) {
        Client entity = new Client( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FItemID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FItemClassID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FParentID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FLevel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FDetail
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FEmail
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // FTypeID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Client entity, int offset) {
        entity.setFItemID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFItemClassID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFParentID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFLevel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFDetail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFTypeID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Client entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Client entity) {
        return null;
    }

    @Override
    public boolean hasKey(Client entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
