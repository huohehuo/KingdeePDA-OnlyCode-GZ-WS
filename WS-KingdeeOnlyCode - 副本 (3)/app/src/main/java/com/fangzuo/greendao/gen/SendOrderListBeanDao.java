package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Beans.SendOrderListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEND_ORDER_LIST_BEAN".
*/
public class SendOrderListBeanDao extends AbstractDao<SendOrderListBean, Long> {

    public static final String TABLENAME = "SEND_ORDER_LIST_BEAN";

    /**
     * Properties of entity SendOrderListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FTip = new Property(1, String.class, "FTip", false, "FTIP");
        public final static Property FName = new Property(2, String.class, "FName", false, "FNAME");
        public final static Property FNumber = new Property(3, String.class, "FNumber", false, "FNUMBER");
        public final static Property FModel = new Property(4, String.class, "FModel", false, "FMODEL");
        public final static Property FQty = new Property(5, String.class, "FQty", false, "FQTY");
        public final static Property FQtying = new Property(6, String.class, "FQtying", false, "FQTYING");
        public final static Property FWlNo = new Property(7, String.class, "FWlNo", false, "FWL_NO");
        public final static Property FSaleNo = new Property(8, String.class, "FSaleNo", false, "FSALE_NO");
        public final static Property FUnit = new Property(9, String.class, "FUnit", false, "FUNIT");
        public final static Property FUnitID = new Property(10, String.class, "FUnitID", false, "FUNIT_ID");
        public final static Property FItemID = new Property(11, String.class, "FItemID", false, "FITEM_ID");
        public final static Property FStorage = new Property(12, String.class, "FStorage", false, "FSTORAGE");
        public final static Property FStorageID = new Property(13, String.class, "FStorageID", false, "FSTORAGE_ID");
        public final static Property FStorageCode = new Property(14, String.class, "FStorageCode", false, "FSTORAGE_CODE");
        public final static Property FStorageIn = new Property(15, String.class, "FStorageIn", false, "FSTORAGE_IN");
        public final static Property FStorageInID = new Property(16, String.class, "FStorageInID", false, "FSTORAGE_IN_ID");
        public final static Property FStorageInCode = new Property(17, String.class, "FStorageInCode", false, "FSTORAGE_IN_CODE");
        public final static Property FWaveHouse = new Property(18, String.class, "FWaveHouse", false, "FWAVE_HOUSE");
        public final static Property FWaveHouseID = new Property(19, String.class, "FWaveHouseID", false, "FWAVE_HOUSE_ID");
        public final static Property FWaveHouseCode = new Property(20, String.class, "FWaveHouseCode", false, "FWAVE_HOUSE_CODE");
        public final static Property FWaveHouseIn = new Property(21, String.class, "FWaveHouseIn", false, "FWAVE_HOUSE_IN");
        public final static Property FWaveHouseInID = new Property(22, String.class, "FWaveHouseInID", false, "FWAVE_HOUSE_IN_ID");
        public final static Property FWaveHouseInCode = new Property(23, String.class, "FWaveHouseInCode", false, "FWAVE_HOUSE_IN_CODE");
        public final static Property FActivity = new Property(24, String.class, "FActivity", false, "FACTIVITY");
    }


    public SendOrderListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SendOrderListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEND_ORDER_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FTIP\" TEXT," + // 1: FTip
                "\"FNAME\" TEXT," + // 2: FName
                "\"FNUMBER\" TEXT," + // 3: FNumber
                "\"FMODEL\" TEXT," + // 4: FModel
                "\"FQTY\" TEXT," + // 5: FQty
                "\"FQTYING\" TEXT," + // 6: FQtying
                "\"FWL_NO\" TEXT," + // 7: FWlNo
                "\"FSALE_NO\" TEXT," + // 8: FSaleNo
                "\"FUNIT\" TEXT," + // 9: FUnit
                "\"FUNIT_ID\" TEXT," + // 10: FUnitID
                "\"FITEM_ID\" TEXT," + // 11: FItemID
                "\"FSTORAGE\" TEXT," + // 12: FStorage
                "\"FSTORAGE_ID\" TEXT," + // 13: FStorageID
                "\"FSTORAGE_CODE\" TEXT," + // 14: FStorageCode
                "\"FSTORAGE_IN\" TEXT," + // 15: FStorageIn
                "\"FSTORAGE_IN_ID\" TEXT," + // 16: FStorageInID
                "\"FSTORAGE_IN_CODE\" TEXT," + // 17: FStorageInCode
                "\"FWAVE_HOUSE\" TEXT," + // 18: FWaveHouse
                "\"FWAVE_HOUSE_ID\" TEXT," + // 19: FWaveHouseID
                "\"FWAVE_HOUSE_CODE\" TEXT," + // 20: FWaveHouseCode
                "\"FWAVE_HOUSE_IN\" TEXT," + // 21: FWaveHouseIn
                "\"FWAVE_HOUSE_IN_ID\" TEXT," + // 22: FWaveHouseInID
                "\"FWAVE_HOUSE_IN_CODE\" TEXT," + // 23: FWaveHouseInCode
                "\"FACTIVITY\" TEXT);"); // 24: FActivity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEND_ORDER_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SendOrderListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FTip = entity.getFTip();
        if (FTip != null) {
            stmt.bindString(2, FTip);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(3, FName);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(4, FNumber);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(5, FModel);
        }
 
        String FQty = entity.getFQty();
        if (FQty != null) {
            stmt.bindString(6, FQty);
        }
 
        String FQtying = entity.getFQtying();
        if (FQtying != null) {
            stmt.bindString(7, FQtying);
        }
 
        String FWlNo = entity.getFWlNo();
        if (FWlNo != null) {
            stmt.bindString(8, FWlNo);
        }
 
        String FSaleNo = entity.getFSaleNo();
        if (FSaleNo != null) {
            stmt.bindString(9, FSaleNo);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(10, FUnit);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(11, FUnitID);
        }
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(12, FItemID);
        }
 
        String FStorage = entity.getFStorage();
        if (FStorage != null) {
            stmt.bindString(13, FStorage);
        }
 
        String FStorageID = entity.getFStorageID();
        if (FStorageID != null) {
            stmt.bindString(14, FStorageID);
        }
 
        String FStorageCode = entity.getFStorageCode();
        if (FStorageCode != null) {
            stmt.bindString(15, FStorageCode);
        }
 
        String FStorageIn = entity.getFStorageIn();
        if (FStorageIn != null) {
            stmt.bindString(16, FStorageIn);
        }
 
        String FStorageInID = entity.getFStorageInID();
        if (FStorageInID != null) {
            stmt.bindString(17, FStorageInID);
        }
 
        String FStorageInCode = entity.getFStorageInCode();
        if (FStorageInCode != null) {
            stmt.bindString(18, FStorageInCode);
        }
 
        String FWaveHouse = entity.getFWaveHouse();
        if (FWaveHouse != null) {
            stmt.bindString(19, FWaveHouse);
        }
 
        String FWaveHouseID = entity.getFWaveHouseID();
        if (FWaveHouseID != null) {
            stmt.bindString(20, FWaveHouseID);
        }
 
        String FWaveHouseCode = entity.getFWaveHouseCode();
        if (FWaveHouseCode != null) {
            stmt.bindString(21, FWaveHouseCode);
        }
 
        String FWaveHouseIn = entity.getFWaveHouseIn();
        if (FWaveHouseIn != null) {
            stmt.bindString(22, FWaveHouseIn);
        }
 
        String FWaveHouseInID = entity.getFWaveHouseInID();
        if (FWaveHouseInID != null) {
            stmt.bindString(23, FWaveHouseInID);
        }
 
        String FWaveHouseInCode = entity.getFWaveHouseInCode();
        if (FWaveHouseInCode != null) {
            stmt.bindString(24, FWaveHouseInCode);
        }
 
        String FActivity = entity.getFActivity();
        if (FActivity != null) {
            stmt.bindString(25, FActivity);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SendOrderListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FTip = entity.getFTip();
        if (FTip != null) {
            stmt.bindString(2, FTip);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(3, FName);
        }
 
        String FNumber = entity.getFNumber();
        if (FNumber != null) {
            stmt.bindString(4, FNumber);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(5, FModel);
        }
 
        String FQty = entity.getFQty();
        if (FQty != null) {
            stmt.bindString(6, FQty);
        }
 
        String FQtying = entity.getFQtying();
        if (FQtying != null) {
            stmt.bindString(7, FQtying);
        }
 
        String FWlNo = entity.getFWlNo();
        if (FWlNo != null) {
            stmt.bindString(8, FWlNo);
        }
 
        String FSaleNo = entity.getFSaleNo();
        if (FSaleNo != null) {
            stmt.bindString(9, FSaleNo);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(10, FUnit);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(11, FUnitID);
        }
 
        String FItemID = entity.getFItemID();
        if (FItemID != null) {
            stmt.bindString(12, FItemID);
        }
 
        String FStorage = entity.getFStorage();
        if (FStorage != null) {
            stmt.bindString(13, FStorage);
        }
 
        String FStorageID = entity.getFStorageID();
        if (FStorageID != null) {
            stmt.bindString(14, FStorageID);
        }
 
        String FStorageCode = entity.getFStorageCode();
        if (FStorageCode != null) {
            stmt.bindString(15, FStorageCode);
        }
 
        String FStorageIn = entity.getFStorageIn();
        if (FStorageIn != null) {
            stmt.bindString(16, FStorageIn);
        }
 
        String FStorageInID = entity.getFStorageInID();
        if (FStorageInID != null) {
            stmt.bindString(17, FStorageInID);
        }
 
        String FStorageInCode = entity.getFStorageInCode();
        if (FStorageInCode != null) {
            stmt.bindString(18, FStorageInCode);
        }
 
        String FWaveHouse = entity.getFWaveHouse();
        if (FWaveHouse != null) {
            stmt.bindString(19, FWaveHouse);
        }
 
        String FWaveHouseID = entity.getFWaveHouseID();
        if (FWaveHouseID != null) {
            stmt.bindString(20, FWaveHouseID);
        }
 
        String FWaveHouseCode = entity.getFWaveHouseCode();
        if (FWaveHouseCode != null) {
            stmt.bindString(21, FWaveHouseCode);
        }
 
        String FWaveHouseIn = entity.getFWaveHouseIn();
        if (FWaveHouseIn != null) {
            stmt.bindString(22, FWaveHouseIn);
        }
 
        String FWaveHouseInID = entity.getFWaveHouseInID();
        if (FWaveHouseInID != null) {
            stmt.bindString(23, FWaveHouseInID);
        }
 
        String FWaveHouseInCode = entity.getFWaveHouseInCode();
        if (FWaveHouseInCode != null) {
            stmt.bindString(24, FWaveHouseInCode);
        }
 
        String FActivity = entity.getFActivity();
        if (FActivity != null) {
            stmt.bindString(25, FActivity);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SendOrderListBean readEntity(Cursor cursor, int offset) {
        SendOrderListBean entity = new SendOrderListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FTip
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FModel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FQty
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FQtying
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FWlNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FSaleNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FUnit
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FUnitID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FItemID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FStorage
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // FStorageID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // FStorageCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // FStorageIn
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // FStorageInID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // FStorageInCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // FWaveHouse
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // FWaveHouseID
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // FWaveHouseCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // FWaveHouseIn
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // FWaveHouseInID
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // FWaveHouseInCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // FActivity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SendOrderListBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFTip(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFModel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFQty(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFQtying(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFWlNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFSaleNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFUnit(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFUnitID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFItemID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFStorage(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFStorageID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFStorageCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFStorageIn(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFStorageInID(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFStorageInCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFWaveHouse(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFWaveHouseID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFWaveHouseCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFWaveHouseIn(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFWaveHouseInID(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFWaveHouseInCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setFActivity(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SendOrderListBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SendOrderListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SendOrderListBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
