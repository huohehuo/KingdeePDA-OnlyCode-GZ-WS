package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.Suppliers4P2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUPPLIERS4_P2".
*/
public class Suppliers4P2Dao extends AbstractDao<Suppliers4P2, Long> {

    public static final String TABLENAME = "SUPPLIERS4_P2";

    /**
     * Properties of entity Suppliers4P2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FPassWord = new Property(1, String.class, "FPassWord", false, "FPASS_WORD");
        public final static Property FID = new Property(2, String.class, "FID", false, "FID");
        public final static Property FName = new Property(3, String.class, "FName", false, "FNAME");
        public final static Property FLevel = new Property(4, String.class, "FLevel", false, "FLEVEL");
        public final static Property FPermit = new Property(5, String.class, "FPermit", false, "FPERMIT");
    }


    public Suppliers4P2Dao(DaoConfig config) {
        super(config);
    }
    
    public Suppliers4P2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUPPLIERS4_P2\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FPASS_WORD\" TEXT," + // 1: FPassWord
                "\"FID\" TEXT," + // 2: FID
                "\"FNAME\" TEXT," + // 3: FName
                "\"FLEVEL\" TEXT," + // 4: FLevel
                "\"FPERMIT\" TEXT);"); // 5: FPermit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUPPLIERS4_P2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Suppliers4P2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FPassWord = entity.getFPassWord();
        if (FPassWord != null) {
            stmt.bindString(2, FPassWord);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(3, FID);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(4, FName);
        }
 
        String FLevel = entity.getFLevel();
        if (FLevel != null) {
            stmt.bindString(5, FLevel);
        }
 
        String FPermit = entity.getFPermit();
        if (FPermit != null) {
            stmt.bindString(6, FPermit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Suppliers4P2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FPassWord = entity.getFPassWord();
        if (FPassWord != null) {
            stmt.bindString(2, FPassWord);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(3, FID);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(4, FName);
        }
 
        String FLevel = entity.getFLevel();
        if (FLevel != null) {
            stmt.bindString(5, FLevel);
        }
 
        String FPermit = entity.getFPermit();
        if (FPermit != null) {
            stmt.bindString(6, FPermit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Suppliers4P2 readEntity(Cursor cursor, int offset) {
        Suppliers4P2 entity = new Suppliers4P2( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FPassWord
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FLevel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // FPermit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Suppliers4P2 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFPassWord(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFLevel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFPermit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Suppliers4P2 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Suppliers4P2 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Suppliers4P2 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
