package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.PDMain;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PDMAIN".
*/
public class PDMainDao extends AbstractDao<PDMain, Long> {

    public static final String TABLENAME = "PDMAIN";

    /**
     * Properties of entity PDMain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FID = new Property(1, String.class, "FID", false, "FID");
        public final static Property FProcessId = new Property(2, String.class, "FProcessId", false, "FPROCESS_ID");
        public final static Property FRemark = new Property(3, String.class, "FRemark", false, "FREMARK");
        public final static Property FDate = new Property(4, String.class, "FDate", false, "FDATE");
        public final static Property FUserName = new Property(5, String.class, "FUserName", false, "FUSER_NAME");
    }


    public PDMainDao(DaoConfig config) {
        super(config);
    }
    
    public PDMainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PDMAIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FID\" TEXT," + // 1: FID
                "\"FPROCESS_ID\" TEXT," + // 2: FProcessId
                "\"FREMARK\" TEXT," + // 3: FRemark
                "\"FDATE\" TEXT," + // 4: FDate
                "\"FUSER_NAME\" TEXT);"); // 5: FUserName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PDMAIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PDMain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(2, FID);
        }
 
        String FProcessId = entity.getFProcessId();
        if (FProcessId != null) {
            stmt.bindString(3, FProcessId);
        }
 
        String FRemark = entity.getFRemark();
        if (FRemark != null) {
            stmt.bindString(4, FRemark);
        }
 
        String FDate = entity.getFDate();
        if (FDate != null) {
            stmt.bindString(5, FDate);
        }
 
        String FUserName = entity.getFUserName();
        if (FUserName != null) {
            stmt.bindString(6, FUserName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PDMain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(2, FID);
        }
 
        String FProcessId = entity.getFProcessId();
        if (FProcessId != null) {
            stmt.bindString(3, FProcessId);
        }
 
        String FRemark = entity.getFRemark();
        if (FRemark != null) {
            stmt.bindString(4, FRemark);
        }
 
        String FDate = entity.getFDate();
        if (FDate != null) {
            stmt.bindString(5, FDate);
        }
 
        String FUserName = entity.getFUserName();
        if (FUserName != null) {
            stmt.bindString(6, FUserName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PDMain readEntity(Cursor cursor, int offset) {
        PDMain entity = new PDMain( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FProcessId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FRemark
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // FUserName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PDMain entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFProcessId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PDMain entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PDMain entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PDMain entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
