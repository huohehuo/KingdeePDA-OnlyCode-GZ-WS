package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FUserID = new Property(0, String.class, "FUserID", false, "FUSER_ID");
        public final static Property FName = new Property(1, String.class, "FName", false, "FNAME");
        public final static Property FPassWord = new Property(2, String.class, "FPassWord", false, "FPASS_WORD");
        public final static Property FEmpID = new Property(3, String.class, "FEmpID", false, "FEMP_ID");
        public final static Property FGroupName = new Property(4, String.class, "FGroupName", false, "FGROUP_NAME");
        public final static Property FPermit = new Property(5, String.class, "FPermit", false, "FPERMIT");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"FUSER_ID\" TEXT," + // 0: FUserID
                "\"FNAME\" TEXT," + // 1: FName
                "\"FPASS_WORD\" TEXT," + // 2: FPassWord
                "\"FEMP_ID\" TEXT," + // 3: FEmpID
                "\"FGROUP_NAME\" TEXT," + // 4: FGroupName
                "\"FPERMIT\" TEXT);"); // 5: FPermit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String FUserID = entity.getFUserID();
        if (FUserID != null) {
            stmt.bindString(1, FUserID);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(2, FName);
        }
 
        String FPassWord = entity.getFPassWord();
        if (FPassWord != null) {
            stmt.bindString(3, FPassWord);
        }
 
        String FEmpID = entity.getFEmpID();
        if (FEmpID != null) {
            stmt.bindString(4, FEmpID);
        }
 
        String FGroupName = entity.getFGroupName();
        if (FGroupName != null) {
            stmt.bindString(5, FGroupName);
        }
 
        String FPermit = entity.getFPermit();
        if (FPermit != null) {
            stmt.bindString(6, FPermit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String FUserID = entity.getFUserID();
        if (FUserID != null) {
            stmt.bindString(1, FUserID);
        }
 
        String FName = entity.getFName();
        if (FName != null) {
            stmt.bindString(2, FName);
        }
 
        String FPassWord = entity.getFPassWord();
        if (FPassWord != null) {
            stmt.bindString(3, FPassWord);
        }
 
        String FEmpID = entity.getFEmpID();
        if (FEmpID != null) {
            stmt.bindString(4, FEmpID);
        }
 
        String FGroupName = entity.getFGroupName();
        if (FGroupName != null) {
            stmt.bindString(5, FGroupName);
        }
 
        String FPermit = entity.getFPermit();
        if (FPermit != null) {
            stmt.bindString(6, FPermit);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FUserID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FPassWord
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FEmpID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FGroupName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // FPermit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setFUserID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFPassWord(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFEmpID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFGroupName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFPermit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    public boolean hasKey(User entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
